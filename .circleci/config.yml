version: 2.1
orbs: 
  vpn: titel-media/openvpn@0.1.1
defaults: &defaults
  working_directory: ~/repo
  docker:
    - image: cimg/node:17.5.0
  environment:
    DEV_TENANT: dev01
    PROD_TENANT: production
    STAGING_TENANT: staging
    SNP_TENANT: preprod
    DOCKER_REPO: public.ecr.aws/p9c8y2k3
    DOCKER_IMAGE_NAME: demo-npm-service
    DUPLO_SERVICE_NAME: nginx
    ECR_REGION: us-west-2
    CIRCLE_PIPELINE_NUMBER: << pipeline.number >>
jobs:
  BuildAndTest:
    <<: *defaults
    steps:
      - checkout

      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "package.json" }}
          - v1-dependencies-
      - run:
          name: Authenticate with registry
          command: echo "//npm.pkg.github.com/:_authToken=$GIT_TOKEN" >> ~/repo/.npmrc

      - run: npm install
#      - run:
#          name: Run tests
#          command: npm test
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}
      - setup_remote_docker:
          version: 19.03.13
      - run: 
          name: build docker container
          command: docker build .
      - persist_to_workspace:
          root: ~/repo
          paths: .
  PublishDockerContainerRC:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/repo
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: Install Dependencies
          command: |
            source ./.circleci/duplo_utils.sh && install_dependencies
      - run:
          name: Create and Push Docker container
          command: |
            source ./.circleci/duplo_utils.sh
            tag=$(node -p "require('./package.json').version")
            docker_tag=$(get_docker_tag_rc $tag)
            echo "Starting build for container: $docker_tag"
            docker build -t $docker_tag . 
            push_container_rc $tag
  DeployToDev:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/repo
      - run:
          name: Update Dev Environment
          command: |
            source ./.circleci/duplo_utils.sh
            tag=$(node -p "require('./package.json').version")
            update_service_rc $DEV_TENANT $tag
      - run:
          name: Verify Dev Environment
          command: |
            echo "Verifying Dev environment"
      - run:
          name: Rollback Dev
          command: |
            source ./.circleci/duplo_utils.sh
            echo "Rollback dev environment requested"
            rollback_dev
          when: on_fail
  DeployToStaging:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/repo
      - run:
          name: Update Staging Environment
          command: |
            source ./.circleci/duplo_utils.sh
            tag=$(node -p "require('./package.json').version")
            update_service_rc $STAGING_TENANT $tag
  VerifyStaging:
    machine:
      image: ubuntu-1604:202004-01
    working_directory: ~/repo
    steps:
      - attach_workspace:
          at: ~/repo
      - vpn/install
      - run:
          name: Verify Staging Environment
          command: |
            source ./.circleci/duplo_utils.sh
            connect_vpn
      - run:
          name: Verify Staging Environment
          command: |
            source ./.circleci/duplo_utils.sh
            echo "Verifying Staging environment"
            ps -eaf | grep openvpn
            echo "Install newman"
            npm install -g newman
            echo "Run newman test"
            newman run https://api.getpostman.com/collections/18088664-dae5fd34-6ba7-4874-a14e-5708a0191f1a?apikey=$POSTMAN_API_KEY -e https://api.getpostman.com/environments/18088664-7b1a24ad-3bcd-427f-84ae-4d3f6fd6a28c?apikey=$POSTMAN_API_KEY
      - vpn/disconnect
  DeployToSNP:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/repo
      - run:
          name: Update SNP Environment
          command: |
            source ./.circleci/duplo_utils.sh
            tag=$(node -p "require('./package.json').version")
            update_service_rc $SNP_TENANT $tag
      - run:
          name: Verify SNP Environment
          command: |
            echo "Verifying SNP Environment"
  DeployToProd:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/repo
      - run:
          name: Update Prod Environment
          command: |
            source ./.circleci/duplo_utils.sh
            tag=$(node -p "require('./package.json').version")
            update_service $PROD_TENANT $tag
      - run:
          name: Verify Prod Environment
          command: |
            echo "Verifying Prod Environment"
  CompleteTheRelease:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/repo
      - run:
          name: Install Dependencies
          command: |
            source ./.circleci/duplo_utils.sh && install_dependencies
      - setup_remote_docker:
          version: 19.03.13
      - run: 
          name: Setup Git
          command: |
            mkdir -p ~/.ssh/ && echo -e "Host github.com\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config
            git config --global user.email "ganesh@duplocloud.com"
            git config --global user.name "Ganesh"
      - run:
          name: Publish Released container
          command: |
            source ./.circleci/duplo_utils.sh
            tag=$(node -p "require('./package.json').version")
            release_container $tag
workflows:
  version: 2.1
  build_test_publish:
    jobs:
      - VerifyStaging:
          filters:
            tags:
              only: /^v.*/
      - BuildAndTest:
          filters:
            tags:
              only: /^v.*/
          requires:
            - VerifyStaging
      - PublishDockerContainerRC:
          requires:
            - BuildAndTest
          filters:
            branches:
              only: master
      - DeployToDev:
          requires:
            - PublishDockerContainerRC
          filters:
            branches:
              only: master
      - DeployToStaging:
          requires:
            - DeployToDev
          filters:
            branches:
              only: master
      - DeployToSNP:
          requires:
            - DeployToStaging
          filters:
            branches:
              only: master
      - request-testing:
          type: approval
          requires:
          - DeployToSNP
      - CompleteTheRelease:
          requires:
            - request-testing
          filters:
            branches:
              only: master
      - DeployToProd:
          requires:
            - CompleteTheRelease
          filters:
            branches:
              only: master
